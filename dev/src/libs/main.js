// Generated by CoffeeScript 1.6.2
(function() {
  var getImageFit, getVendorCSSObject;

  $(function() {
    var ctrack, drawLoop, inputVideo, layout, overlay, overlayCC, startVideo;

    inputVideo = document.getElementById("inputVideo");
    overlay = document.getElementById("trackCanvas");
    overlayCC = overlay.getContext("2d");
    ctrack = new clm.tracker({
      useWebGL: true
    });
    ctrack.init(pModel);
    $(document).on('ready', function() {
      var chromeVersion, videoSelector;

      navigator.getUserMedia = navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia || navigator.msGetUserMedia;
      window.URL = window.URL || window.webkitURL || window.msURL || window.mozURL;
      if (navigator.getUserMedia) {
        videoSelector = {
          video: true
        };
        if (window.navigator.appVersion.match(/Chrome\/(.*?) /)) {
          chromeVersion = parseInt(window.navigator.appVersion.match(/Chrome\/(\d+)\./)[1], 10);
          if (chromeVersion < 20) {
            videoSelector = "video";
          }
        }
        navigator.getUserMedia(videoSelector, function(stream) {
          if (inputVideo.mozCaptureStream) {
            inputVideo.mozSrcObject = stream;
          } else {
            inputVideo.src = (window.URL && window.URL.createObjectURL(stream)) || stream;
          }
          inputVideo.play();
          return startVideo();
        }, function() {
          return alert("There was some problem trying to fetch video from your webcam, using a fallback video instead.");
        });
      } else {
        alert("Your browser does not seem to support getUserMedia, using a fallback video instead.");
      }
      layout();
      return $(window).on('resize', function() {
        return layout();
      });
    });
    layout = function() {
      var h, o, w;

      w = window.innerWidth;
      h = window.innerHeight;
      return o = getImageFit(640, 480, w - 100, h - 100);
    };
    startVideo = function() {
      inputVideo.play();
      ctrack.start(inputVideo);
      return drawLoop();
    };
    return drawLoop = function() {
      requestAnimationFrame(drawLoop);
      overlayCC.clearRect(0, 0, 720, 480);
      if (ctrack.getCurrentPosition()) {
        return ctrack.draw(overlay);
      }
    };
  });

  getImageFit = function(imageW, imageH, areaW, areaH) {
    var areaHV, imgHV, result, sc;

    areaHV = areaW / areaH;
    imgHV = imageW / imageH;
    sc = 1;
    result = {};
    if (imgHV > areaHV) {
      sc = areaH / imageH;
      result = {
        x: -(imageW * sc - areaW) / 2 + 'px',
        y: 0,
        scale: sc
      };
    } else {
      sc = areaW / imageW;
      result = {
        x: 0,
        y: -(imageH * sc - areaH) / 2 + 'px',
        scale: sc
      };
    }
    return result;
  };

  getVendorCSSObject = function(propName, value) {
    var o, p, prefixes, _i, _len;

    prefixes = ["", "-webkit-", "-moz-", "-ms-", "-o-"];
    o = {};
    for (_i = 0, _len = prefixes.length; _i < _len; _i++) {
      p = prefixes[_i];
      o[p + propName] = value;
    }
    return o;
  };

}).call(this);
